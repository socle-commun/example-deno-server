import { FileNode, FolderNode, Tree, TreeNode } from "../../../../mod.ts";
import { join } from "../../../../../../../ext/deps.ts";

/**
 * üìÇ Charger les fichiers d'un r√©pertoire et construire l'arborescence de mani√®re r√©cursive.
 *
 * üß© Fonctionnalit√©s :
 * - Parcours r√©cursif des fichiers dans un r√©pertoire.
 * - Structure l'arborescence en utilisant Tree, FolderNode et FileNode.
 * - Charge dynamiquement le contenu des fichiers.
 *
 * üì¶ Entr√©e :
 * - `dir` : Le r√©pertoire √† parcourir.
 *
 * üì§ Sortie :
 * - Retourne un objet `Tree` repr√©sentant l'arborescence des fichiers.
 */
export function loadFileTree(dir: string): Tree {
  // Cr√©e un objet Tree avec la racine initiale
  const tree = new Tree(dir);

  // Fonction r√©cursive pour parcourir les dossiers et fichiers
  function exploreDirectory(currentPath: string, currentFolder: FolderNode) {
    for (const entry of Deno.readDirSync(currentPath)) {
      const fullPath = join(currentPath, entry.name);
      if (entry.isDirectory) {
        // Si c'est un dossier, ajouter un n≈ìud FolderNode
        let folderNode = currentFolder.children.find((child: TreeNode) =>
          child.name === entry.name
        );
        if (!folderNode) {
          folderNode = new FolderNode(entry.name, currentFolder);
          currentFolder.addChild(folderNode);
        }

        // Appel r√©cursif pour explorer le sous-dossier
        exploreDirectory(fullPath, folderNode as FolderNode);
      } else if (entry.isFile) {
        // Si c'est un fichier, ajouter un n≈ìud FileNode
        const fileNode = new FileNode(
          entry.name,
          currentFolder,
          () => Deno.readTextFileSync(fullPath),
        );
        currentFolder.addChild(fileNode); // Ajouter le fichier au dossier courant
      }
    }
  }

  // Commencer l'exploration √† partir du r√©pertoire racine
  exploreDirectory(dir, tree.root);

  return tree;
}
